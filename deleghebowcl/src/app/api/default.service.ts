/**
 * Deleghe
 * Api risorse per gestire le deleghe e le dichiarazioni (deleghe minori)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

/*******************************************************************************
* Copyright Regione Piemonte - 2022
* SPDX-License-Identifier: EUPL-1.2
******************************************************************************/

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from './encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Cittadino } from '../model/cittadino';
import { Dichiarazione } from '../model/dichiarazione';
import { Errore } from '../model/errore';
import { InfoServizio } from '../model/infoServizio';

import { BASE_PATH, COLLECTION_FORMATS }                     from './variables';
import { Configuration }                                     from './configuration';
import {environment} from '../../environments/environment';
import {Delega} from '../model/delega';
import {ServiziInfo} from '../model/servizi';
import { DeletServizioParametro } from '../model/deletServizioParametro';
import { LoginOperatore } from '../model/loginOperatore';
import { DocumentoFile } from '../model/models';
import { TokenRequest } from '../model/tokenRequest';
import { TokenResponse } from '../model/tokenResponse';


@Injectable()
export class DefaultService {

    protected basePath = environment.delegheboUrl;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     * Aggiorna un cittadino
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf
     * @param cittadino
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cittadino?: Cittadino, observe?: 'body', reportProgress?: boolean): Observable<Cittadino>;
    public cittadiniCfPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cittadino?: Cittadino, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cittadino>>;
    public cittadiniCfPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cittadino?: Cittadino, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cittadino>>;
    public cittadiniCfPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cittadino?: Cittadino, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfPut.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfPut.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfPut.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfPut.');
        }


        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Cittadino>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}`,
            cittadino,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

  /**
   *
   * Aggiorna una dichiarazione
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param uuidDichiarazione
   * @param dichiarazione I campi obbligatori sono  * tipo    * codice -&gt; deve essere CONGIUNTA  * stato    * codice -&gt; deve essere DA_COMPLETARE, ATTIVA, REVOCATA, SCADUTA  * modo    * codice -&gt; deve essere valorizzato ON_LINE  * dettagli    * stato      * codice -&gt; deve essere DA_APPROVARE, VALIDA, DA_APPROVARE, REVOCATA_BLOCCO, REVOCATA, SCADUTA  * genitore_tutore_curatore    * codice_fiscale  * ruolo_genitore_curatore    * codice -&gt; deve essere  GENITORE_1 o GENITORE_2  * figlio_tutelato_curato    * codice_fiscale  * ruolo_figlio_tutelato_curato    * codice deve essere passato FIGLIO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public dichiarazionePost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, delega?: Dichiarazione, observe?: 'body', reportProgress?: boolean): Observable<Dichiarazione>;
  public dichiarazionePost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, delega?: Dichiarazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dichiarazione>>;
  public dichiarazionePost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, delega?: Dichiarazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dichiarazione>>;
  public dichiarazionePost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, delega?: Dichiarazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling delegaPut.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling delegaPut.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling delegaPut.');
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Dichiarazione>(`${this.basePath}/cittadini/dichiarazione`,
      delega,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Aggiorna una dichiarazione
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param uuidDichiarazione
   * @param dichiarazione I campi obbligatori sono  * tipo    * codice -&gt; deve essere CONGIUNTA  * stato    * codice -&gt; deve essere DA_COMPLETARE, ATTIVA, REVOCATA, SCADUTA  * modo    * codice -&gt; deve essere valorizzato ON_LINE  * dettagli    * stato      * codice -&gt; deve essere DA_APPROVARE, VALIDA, DA_APPROVARE, REVOCATA_BLOCCO, REVOCATA, SCADUTA  * genitore_tutore_curatore    * codice_fiscale  * ruolo_genitore_curatore    * codice -&gt; deve essere  GENITORE_1 o GENITORE_2  * figlio_tutelato_curato    * codice_fiscale  * ruolo_figlio_tutelato_curato    * codice deve essere passato FIGLIO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public delegaPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, delega?: Delega, observe?: 'body', reportProgress?: boolean): Observable<Delega>;
  public delegaPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, delega?: Delega, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Delega>>;
  public delegaPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, delega?: Delega, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Delega>>;
  public delegaPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, delega?: Delega, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling delegaPut.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling delegaPut.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling delegaPut.');
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Delega>(`${this.basePath}/cittadini/deleghe`,
      delega,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Aggiorna una dichiarazione
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param uuidDichiarazione
   * @param dichiarazione I campi obbligatori sono  * tipo    * codice -&gt; deve essere CONGIUNTA  * stato    * codice -&gt; deve essere DA_COMPLETARE, ATTIVA, REVOCATA, SCADUTA  * modo    * codice -&gt; deve essere valorizzato ON_LINE  * dettagli    * stato      * codice -&gt; deve essere DA_APPROVARE, VALIDA, DA_APPROVARE, REVOCATA_BLOCCO, REVOCATA, SCADUTA  * genitore_tutore_curatore    * codice_fiscale  * ruolo_genitore_curatore    * codice -&gt; deve essere  GENITORE_1 o GENITORE_2  * figlio_tutelato_curato    * codice_fiscale  * ruolo_figlio_tutelato_curato    * codice deve essere passato FIGLIO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public delegaPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, delega?: Delega, observe?: 'body', reportProgress?: boolean): Observable<Delega>;
  public delegaPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, delega?: Delega, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Delega>>;
  public delegaPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, delega?: Delega, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Delega>>;
  public delegaPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, delega?: Delega, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling delegaPut.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling delegaPut.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling delegaPut.');
    }

    if (cf === null || cf === undefined) {
      throw new Error('Required parameter cf was null or undefined when calling delegaPut.');
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<Delega>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/deleghe`,
      delega,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Ricerca di dichiarazioni di un cittadino
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findCitizen(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cittadino>>;
  public findCitizen(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cittadino>>>;
  public findCitizen(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cittadino>>>;
  public findCitizen(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling findCitizen.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling findCitizen.');
    }

    if (filter === null || filter === undefined) {
      throw new Error('Required parameter filter was null or undefined when calling findCitizen.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    queryParameters = queryParameters.set('filter', <any>filter);

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<Cittadino>>(`${this.basePath}/cittadini/find`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Ricerca di dichiarazioni di un cittadino
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public sevicesGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ServiziInfo>>;
  public sevicesGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ServiziInfo>>>;
  public sevicesGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ServiziInfo>>>;
  public sevicesGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDichiarazioniGet.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDichiarazioniGet.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDichiarazioniGet.');
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<Delega>>(this.basePath+'/back-office/services',
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Ricerca di dichiarazioni di un cittadino
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public delegheGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Delega>>;
  public delegheGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Delega>>>;
  public delegheGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Delega>>>;
  public delegheGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling delegheGet.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling delegheGet.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling delegheGet.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (filter !== undefined && filter !== null) {
      queryParameters = queryParameters.set('filter', <any>filter);
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    // RAFFA OLD return this.httpClient.get<Array<Delega>>(this.basePath+'/cittadini/deleghe',
    return this.httpClient.get<Array<Delega>>(this.basePath+'/back-office/deleghebo',
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Ricerca legame delegato delegante
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public legameGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Delega>>;
  public legameGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Delega>>>;
  public legameGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Delega>>>;
  public legameGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling legameGet.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling legameGet.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling legameGet.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (filter !== undefined && filter !== null) {
      queryParameters = queryParameters.set('filter', <any>filter);
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    // RAFFA OLD return this.httpClient.get<Array<Delega>>(this.basePath+'/cittadini/deleghe',
    return this.httpClient.get<Array<Delega>>(this.basePath+'/back-office/legame',
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

    /**
     *
     * Ricerca cittadini
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cittadino>>;
    public cittadiniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cittadino>>>;
    public cittadiniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cittadino>>>;
    public cittadiniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniGet.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniGet.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Cittadino>>(`${this.basePath}/cittadini`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Inserisce un cittadino
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cittadino
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cittadino?: Cittadino, observe?: 'body', reportProgress?: boolean): Observable<Dichiarazione>;
    public cittadiniPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cittadino?: Cittadino, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dichiarazione>>;
    public cittadiniPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cittadino?: Cittadino, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dichiarazione>>;
    public cittadiniPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cittadino?: Cittadino, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniPost.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniPost.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniPost.');
        }


        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Dichiarazione>(`${this.basePath}/cittadini`,
            cittadino,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Serve per verificare se il servizio risponde o meno
     * @param xRequestID
     * @param xCodiceServizio
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servizioAttivoGet(xRequestID: string, xCodiceServizio: string, observe?: 'body', reportProgress?: boolean): Observable<InfoServizio>;
    public servizioAttivoGet(xRequestID: string, xCodiceServizio: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InfoServizio>>;
    public servizioAttivoGet(xRequestID: string, xCodiceServizio: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InfoServizio>>;
    public servizioAttivoGet(xRequestID: string, xCodiceServizio: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling servizioAttivoGet.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling servizioAttivoGet.');
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InfoServizio>(`${this.basePath}/servizio-attivo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



       /**
     * Ricerca di dettaglio della delega by uuid
     *
     */
      /**
   *
   * Ricerca di dichiarazioni di un cittadino
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public delegaGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Delega>;
  public delegaGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Delega>>;
  public delegaGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Delega>>;
  public delegaGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling delegaGet.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling delegaGet.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling delegaGet.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (filter !== undefined && filter !== null) {
      queryParameters = queryParameters.set('filter', <any>filter);
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

   return this.httpClient.get<Delega>(this.basePath+'/back-office/delegabo',
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }


  /**
   *
   * Ricerca di data validazione
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDatavalidazione(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DeletServizioParametro>>;
  public getDatavalidazione(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DeletServizioParametro>>>;
  public getDatavalidazione(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DeletServizioParametro>>>;
  public getDatavalidazione(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling delegheGet.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling getDatavalidazione.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling getDatavalidazione.');
    }

    if (filter === null || filter === undefined) {
      throw new Error('Required parameter filter was null or undefined when calling getDatavalidazione.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    queryParameters = queryParameters.set('filter', <any>filter);

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<DeletServizioParametro[]>(`${this.basePath}/back-office/validazione`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }


  /**
   *
   * Ricerca Identita operatore
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getIdentitaOperatore(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<LoginOperatore>;
  public getIdentitaOperatore(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<LoginOperatore>;
  public getIdentitaOperatore(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<LoginOperatore>;
  public getIdentitaOperatore(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling getIdentitaOperatore.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling getIdentitaOperatore.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling getIdentitaOperatore.');
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<LoginOperatore>(this.basePath+'/back-office/identitaOperatore',
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }


  /**
   *
   * Rimuove Identita operatore
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public removeFromSession(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<LoginOperatore>;
  public removeFromSession(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<LoginOperatore>;
  public removeFromSession(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<LoginOperatore>;
  public removeFromSession(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling removeFromSession.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling removeFromSession.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling removeFromSession.');
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<LoginOperatore>(this.basePath+'/back-office/rimuoviSessione',
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }


    /**
   *
   * Recupera file del documento allegato (Stato di famiglia)
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public ricercaFileDocumentoPerId(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, fileId?: number, observe?: 'body', reportProgress?: boolean): Observable<DocumentoFile>;
  public ricercaFileDocumentoPerId(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, fileId?: number, observe?: 'response', reportProgress?: boolean): Observable<DocumentoFile>;
  public ricercaFileDocumentoPerId(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, fileId?: number, observe?: 'events', reportProgress?: boolean): Observable<DocumentoFile>;
  public ricercaFileDocumentoPerId(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, fileId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling ricercaFileDocumentoPerId.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling ricercaFileDocumentoPerId.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling ricercaFileDocumentoPerId.');
    }

    if (fileId === null || fileId === undefined) {
      throw new Error('Required parameter filter was null or undefined when calling ricercaFileDocumentoPerId.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    queryParameters = queryParameters.set('fileId', <any>fileId);


    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<DocumentoFile>(this.basePath+'/back-office/fileDocumento',
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

/**
   *
   * Ricerca operatore valdio con asl
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getOperatoreValidoConAsl(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, codiceFiscale?: string, observe?: 'body', reportProgress?: boolean): Observable<LoginOperatore>;
  public getOperatoreValidoConAsl(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, codiceFiscale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LoginOperatore>>;
  public getOperatoreValidoConAsl(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, codiceFiscale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LoginOperatore>>;
  public getOperatoreValidoConAsl(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, codiceFiscale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling getOperatoreValidoConAsl.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling getOperatoreValidoConAsl.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling getOperatoreValidoConAsl.');
    }

    if (codiceFiscale === null || codiceFiscale === undefined) {
      throw new Error('Required parameter filter was null or undefined when calling getOperatoreValidoConAsl.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    queryParameters = queryParameters.set('codiceFiscale', <any>codiceFiscale);

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<LoginOperatore>(`${this.basePath}/back-office/operatoreValido`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Aggiorna una dichiarazione
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param tokenRequest I campi obbligatori sono TUTTI
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getTokenInformation2(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<TokenResponse>;
  public getTokenInformation2(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TokenResponse>>;
  public getTokenInformation2(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TokenResponse>>;
  public getTokenInformation2(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling getTokenInformation2.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling getTokenInformation2.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling getTokenInformation2.');
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }

    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.get<TokenResponse>(this.basePath+'/cittadini/tokeninfo',
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }


  /**
   *
   * Ricerca di dichiarazioni di un cittadino
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getIdAura(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cittadino>>;
  public getIdAura(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cittadino>>>;
  public getIdAura(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cittadino>>>;
  public getIdAura(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling getIdAura.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling getIdAura.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling getIdAura.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (filter !== undefined && filter !== null) {
      queryParameters = queryParameters.set('filter', <any>filter);
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<Cittadino>>(this.basePath+'/cittadini/getIdAura',
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }


}
