/**
 * Comuni
 * Api risorse per leggere i sercizi di apisan cross
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
/*******************************************************************************
* Copyright Regione Piemonte - 2022
* SPDX-License-Identifier: EUPL-1.2
******************************************************************************/

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from './encoder';

import { Observable } from 'rxjs/Observable';

import { ElencoComuni } from '../model/elencoComuni';
import { Errore } from '../model/errore';

import { BASE_PATH, COLLECTION_FORMATS } from './variables';
import { Configuration } from './configuration';
import {environment} from '../../environments/environment';
import { ArrayType } from '@angular/compiler';
import { map } from 'rxjs/operators';
import { ElencoNazioni } from '../model/elencoNazioni';


@Injectable()
export class GestioneComuniService {

    protected basePath = environment.delegheboUrl;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {

            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

     /**
   *
   * Leggi comuni in modo dinamico col like
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public cercaComuniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ElencoComuni>>;
  public cercaComuniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ElencoComuni>>>;
  public cercaComuniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ElencoComuni>>>;
  public cercaComuniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling delegheGet.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling delegheGet.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling delegheGet.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (filter !== undefined && filter !== null) {
      queryParameters = queryParameters.set('filter', <any>filter);
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<ElencoComuni[]>>(`${this.basePath}/comuni/cercaComuni`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

    /**
   *
   * Leggi comuni in modo dinamico col like
   * @param shibIdentitaCodiceFiscale
   * @param xRequestID
   * @param xCodiceServizio
   * @param cf
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public cercaNazioniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ElencoNazioni>>;
  public cercaNazioniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ElencoNazioni>>>;
  public cercaNazioniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ElencoNazioni>>>;
  public cercaNazioniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
      throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling delegheGet.');
    }

    if (xRequestID === null || xRequestID === undefined) {
      throw new Error('Required parameter xRequestID was null or undefined when calling delegheGet.');
    }

    if (xCodiceServizio === null || xCodiceServizio === undefined) {
      throw new Error('Required parameter xCodiceServizio was null or undefined when calling delegheGet.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (filter !== undefined && filter !== null) {
      queryParameters = queryParameters.set('filter', <any>filter);
    }

    let headers = this.defaultHeaders;
    if (xRequestID !== undefined && xRequestID !== null) {
      headers = headers.set('X-Request-ID', String(xRequestID));
    }
    if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
      headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<ElencoNazioni[]>>(`${this.basePath}/nazioni/cercaNazioni`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
