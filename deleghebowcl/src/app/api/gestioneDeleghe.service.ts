/**
 * Deleghe
 * Api risorse per gestire le deleghe e le dichiarazioni (deleghe minori)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

/*******************************************************************************
* Copyright Regione Piemonte - 2022
* SPDX-License-Identifier: EUPL-1.2
******************************************************************************/

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from './encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DelegaCittadino } from '../model/delegaCittadino';
import { DelegaServizio } from '../model/delegaServizio';
import { Errore } from '../model/errore';

import { BASE_PATH, COLLECTION_FORMATS }                     from './variables';
import { Configuration }                                     from './configuration';


@Injectable()
export class GestioneDelegheService {

    protected basePath = 'https://xyz.csi.it/apisanaut/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     * Corrisponde alla risorsa  singola del delegato  rappresenta uno &#39;shortcut&#39; alla uri deleganti. Il codice fiscale dell&#39;header deve essere verificato con il cf passato nel path param se sono diversi ritorna errore 401. I deleganti ritornati hanno ognuno un elenco di deleghe; il codice fiscale non viene ripetuto per ogni delega.Verificare   X-Request-ID deve essere usato anche nella response o serve solo per   l&#39;audit? Aggiunto codice servizio nell&#39;header per requisito sicurezza proveniente dal giallo   I filtri ammissibili sono i seguenti
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf
     * @param cfdelegante
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDelegantiCfdeleganteGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegante: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DelegaCittadino>>;
    public cittadiniCfDelegantiCfdeleganteGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegante: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DelegaCittadino>>>;
    public cittadiniCfDelegantiCfdeleganteGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegante: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DelegaCittadino>>>;
    public cittadiniCfDelegantiCfdeleganteGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegante: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDelegantiCfdeleganteGet.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDelegantiCfdeleganteGet.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDelegantiCfdeleganteGet.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDelegantiCfdeleganteGet.');
        }

        if (cfdelegante === null || cfdelegante === undefined) {
            throw new Error('Required parameter cfdelegante was null or undefined when calling cittadiniCfDelegantiCfdeleganteGet.');
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DelegaCittadino>>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/deleganti/${encodeURIComponent(String(cfdelegante))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Esegue una rinuncia a una delega ricevuta; il cf passato come path param viene verificato con il cf dell&#39;header se non coincidono ritorna errore 401, e corrisponde alla persona che rinuncia alla delega precedentemente conferitagli dal delegante passato nel path param cfdelegante.  Il codice servizio rappresenta il servizio a cui il cittadino rinuncia a essere delegante. Non effettua una delete su database ma inserisce una data di fine validita &#x3D; alla data odierna. Il parametro uuid rappresenta la chiave della delega (verificare)
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf cf del delegante
     * @param cfdelegante codice servizio del servizio a cui il delegato rinuncia
     * @param uuid Metodo di modifica di una delega di un cittadino, permette ad esempio di cambiare lo stato alla delega.
     * @param delegheServizio
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDelegantiCfdeleganteServiziUuidPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegante: string, uuid: string, delegheServizio: DelegaServizio, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cittadiniCfDelegantiCfdeleganteServiziUuidPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegante: string, uuid: string, delegheServizio: DelegaServizio, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cittadiniCfDelegantiCfdeleganteServiziUuidPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegante: string, uuid: string, delegheServizio: DelegaServizio, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cittadiniCfDelegantiCfdeleganteServiziUuidPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegante: string, uuid: string, delegheServizio: DelegaServizio, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDelegantiCfdeleganteServiziUuidPut.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDelegantiCfdeleganteServiziUuidPut.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDelegantiCfdeleganteServiziUuidPut.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDelegantiCfdeleganteServiziUuidPut.');
        }

        if (cfdelegante === null || cfdelegante === undefined) {
            throw new Error('Required parameter cfdelegante was null or undefined when calling cittadiniCfDelegantiCfdeleganteServiziUuidPut.');
        }

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling cittadiniCfDelegantiCfdeleganteServiziUuidPut.');
        }

        if (delegheServizio === null || delegheServizio === undefined) {
            throw new Error('Required parameter delegheServizio was null or undefined when calling cittadiniCfDelegantiCfdeleganteServiziUuidPut.');
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/deleganti/${encodeURIComponent(String(cfdelegante))}/servizi/${encodeURIComponent(String(uuid))}`,
            delegheServizio,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Fornisce l&#39;elenco delle persone che hanno delegato il cf passato in path param a compiere operazioni sui servizi sanitari. Il codice fiscale dell&#39;header deve essere verificato con il cf passato nel path param se sono diversi ritorna errore 401. Viene ritornato un array di cittadino-deleghe che rappresenta le persone che hanno compiuto l&#39;operazione di delegare il cittadino su un servizio. Il codice fiscale non viene ripetuto per ogni delega. codice fiscale non viene ripetuto per ogni delega.Verificare X-Request-ID deve essere usato anche nella response o serve solo per l&#39;audit? Aggiunto codice servizio nell&#39;header per requisito sicurezza proveniente dal giallo. Il filtro viene consentito per codice_fiscale, per stato_delega e sul codice servizio come definito sull&#39;oggetto delega_filter
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf
     * @param filter Codice servizio viene passato dal verde e serve allo strato giallo per fare audit
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDelegantiGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DelegaCittadino>>;
    public cittadiniCfDelegantiGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DelegaCittadino>>>;
    public cittadiniCfDelegantiGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DelegaCittadino>>>;
    public cittadiniCfDelegantiGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDelegantiGet.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDelegantiGet.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDelegantiGet.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDelegantiGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DelegaCittadino>>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/deleganti`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Corrisponde alla risorsa  singola del delegato  rappresenta uno &#39;shortcut&#39; alla uri delegati  Il codice fiscale dell&#39;header deve essere verificato con il cf passato nel path param, se sono diversi ritorna errore 401. Ogni delegante ritornato ha un elenco di deleghe;
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf
     * @param cfdelegato
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDelegatiCfdelegatoGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegato: string, observe?: 'body', reportProgress?: boolean): Observable<DelegaCittadino>;
    public cittadiniCfDelegatiCfdelegatoGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegato: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DelegaCittadino>>;
    public cittadiniCfDelegatiCfdelegatoGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegato: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DelegaCittadino>>;
    public cittadiniCfDelegatiCfdelegatoGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, cfdelegato: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDelegatiCfdelegatoGet.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDelegatiCfdelegatoGet.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDelegatiCfdelegatoGet.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDelegatiCfdelegatoGet.');
        }

        if (cfdelegato === null || cfdelegato === undefined) {
            throw new Error('Required parameter cfdelegato was null or undefined when calling cittadiniCfDelegatiCfdelegatoGet.');
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DelegaCittadino>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/delegati/${encodeURIComponent(String(cfdelegato))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Modifica le deleghe di un delegato è possibile non avere una delega in stato attiva. Nell&#39;header viene passato un codice fiscale che deve essere verificato con il codice fiscale passato nel path, se non corrispondono ritorna errore 401.Gli stati possibili sono     * ATTIVA     * IN_SCADENZA     * SCADUTA     * RIFIUTATA     * REVOCATA
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cfdelegato cf della persona delegata
     * @param cf cf della persona delegante
     * @param cittadinoDelega I campi obbligatori da valorizzare sono   * uuid   * codice_fiscale_delega   * nome_delega   * cognome_delega   * data_nascita_delega   * luogo_nascita_delega   * sesso_delega   * stato_anagrafica -&gt; stati possibili indicati in descrizione del servizio    deleghe     * uuid nel caso in cui presente da precedente get     * codice_servizio     * data_inizio_delega     * data_fine_delega     * stato_delega possibili valori su descrizione del servizio
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDelegatiCfdelegatoPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cfdelegato: string, cf: string, cittadinoDelega: DelegaCittadino, observe?: 'body', reportProgress?: boolean): Observable<DelegaCittadino>;
    public cittadiniCfDelegatiCfdelegatoPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cfdelegato: string, cf: string, cittadinoDelega: DelegaCittadino, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DelegaCittadino>>;
    public cittadiniCfDelegatiCfdelegatoPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cfdelegato: string, cf: string, cittadinoDelega: DelegaCittadino, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DelegaCittadino>>;
    public cittadiniCfDelegatiCfdelegatoPut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cfdelegato: string, cf: string, cittadinoDelega: DelegaCittadino, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDelegatiCfdelegatoPut.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDelegatiCfdelegatoPut.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDelegatiCfdelegatoPut.');
        }

        if (cfdelegato === null || cfdelegato === undefined) {
            throw new Error('Required parameter cfdelegato was null or undefined when calling cittadiniCfDelegatiCfdelegatoPut.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDelegatiCfdelegatoPut.');
        }

        if (cittadinoDelega === null || cittadinoDelega === undefined) {
            throw new Error('Required parameter cittadinoDelega was null or undefined when calling cittadiniCfDelegatiCfdelegatoPut.');
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<DelegaCittadino>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/delegati/${encodeURIComponent(String(cfdelegato))}`,
            cittadinoDelega,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Fornisce l&#39;elenco delle persone che il cf ha delegato a compiere operazioni sui servizi sanitari per il codice fiscale fornito nel path param che hanno una delega valida (stati Attiva e in Scadenza). Il codice fiscale dell&#39;header deve essere verificato con il cf passato nel path param, se sono diversi ritorna errore 401. Ogni delegante ritornato  ha un elenco di deleghe; il codice fiscale e i dati anagrafici non vengono ripetuti per ogni delega.Il filtro viene consentito per codice_fiscale e codice_servizio come definito nell&#39;oggetto delega_valida_filter
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf
     * @param filter Il filtro puo essere applicato sul codice_fiscale e/o sul codice servizio; per entrambi i filtri ho previsto dei metodi \\&#39;shortcut\\&#39;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDelegatiDelegheValideGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DelegaCittadino>>;
    public cittadiniCfDelegatiDelegheValideGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DelegaCittadino>>>;
    public cittadiniCfDelegatiDelegheValideGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DelegaCittadino>>>;
    public cittadiniCfDelegatiDelegheValideGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDelegatiDelegheValideGet.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDelegatiDelegheValideGet.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDelegatiDelegheValideGet.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDelegatiDelegheValideGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DelegaCittadino>>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/delegati/deleghe-valide`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Fornisce l&#39;elenco delle persone che il cf ha delegato a compiere operazioni sui servizi sanitari per il codice fiscale fornito nel path param. Il codice fiscale dell&#39;header deve essere verificato con il cf passato nel path param, se sono diversi ritorna errore 401. Ogni delegante ritornato  ha un elenco di deleghe; il codice fiscale e i dati anagrafici non vengono ripetuti per ogni delega.Il filtro viene consentito per codice_fiscale, stato_delega e codice_servizio come definito nell&#39;oggetto delega_filter
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf
     * @param filter Il filtro puo essere applicato sul codice_fiscale e/o sul codice servizio; per entrambi i filtri ho previsto dei metodi \\&#39;shortcut\\&#39;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDelegatiGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DelegaCittadino>>;
    public cittadiniCfDelegatiGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DelegaCittadino>>>;
    public cittadiniCfDelegatiGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DelegaCittadino>>>;
    public cittadiniCfDelegatiGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDelegatiGet.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDelegatiGet.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDelegatiGet.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDelegatiGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DelegaCittadino>>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/delegati`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * inserisce almeno un delegato che deve avere almeno una delega in stato attiva. Nell&#39;header viene passato un codice fiscale che deve essere verificato con il codice fiscale passato nel path, se non corrispondono ritorna errore 401. Il cittadino che compie l&#39;operazione viene reperito dal servizio tramite chiamata ad aura in quanto possono inserire deleghe e delegati unicamente cittadini piemontesi. Stati delega consentiti (al front end)  * Attiva
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf cf della persona delegante
     * @param delegati I campi obbligatori da valorizzare sono * codice_fiscale_delega * nome_delega * cognome_delega * data_nascita_delega * luogo_nascita_delega * sesso_delega deleghe   * codice_servizio   * data_inizio_delega -&gt; deve essere data odierna   * data_fine_delega -&gt; il massimo possibile deve essere preso dal servizio apisancross/servizi con data inizio delega + numero_giorni_delegabile   * stato_delega -&gt; in inserimento deve essere ATTIVA
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDelegatiPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, delegati: Array<DelegaCittadino>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cittadiniCfDelegatiPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, delegati: Array<DelegaCittadino>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cittadiniCfDelegatiPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, delegati: Array<DelegaCittadino>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cittadiniCfDelegatiPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, delegati: Array<DelegaCittadino>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDelegatiPost.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDelegatiPost.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDelegatiPost.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDelegatiPost.');
        }

        if (delegati === null || delegati === undefined) {
            throw new Error('Required parameter delegati was null or undefined when calling cittadiniCfDelegatiPost.');
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/delegati`,
            delegati,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
