/**
 * Deleghe
 * Api risorse per gestire le deleghe e le dichiarazioni (deleghe minori)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

/*******************************************************************************
* Copyright Regione Piemonte - 2022
* SPDX-License-Identifier: EUPL-1.2
******************************************************************************/

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from './encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Dichiarazione } from '../model/dichiarazione';
import { Errore } from '../model/errore';

import { BASE_PATH, COLLECTION_FORMATS }                     from './variables';
import { Configuration }                                     from './configuration';
import {environment} from '../../environments/environment';


@Injectable()
export class GestioneDichiarazioniService {

    protected basePath = environment.delegheboUrl;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     * Ricerca di dichiarazioni di un cittadino
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf
     * @param filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDichiarazioniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Dichiarazione>>;
    public cittadiniCfDichiarazioniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Dichiarazione>>>;
    public cittadiniCfDichiarazioniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Dichiarazione>>>;
    public cittadiniCfDichiarazioniGet(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDichiarazioniGet.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDichiarazioniGet.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDichiarazioniGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Dichiarazione>>(this.basePath+'/cittadini'+(cf? "/"+cf: '')+'/dichiarazioni',
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Inserisce una dichiarazione nel body devono essere presenti 2 dettagli uno per il genitore 1, ovvero lo stesso del path param, e l&#39;altro per il secondo genitore.
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf
     * @param dichiarazione I campi obbligatori sono  * tipo    * codice -&gt; deve essere CONGIUNTA  * stato    * codice -&gt; deve essere DA_COMPLETARE  * modo    * codice -&gt; deve essere valorizzato ON_LINE  * dettagli    * stato      * codice -&gt; deve essere DA_APPROVARE  * genitore_tutore_curatore    * codice_fiscale  * ruolo_genitore_curatore    * codice -&gt; deve essere  GENITORE_1 o GENITORE_2  * figlio_tutelato_curato    * codice_fiscale  * ruolo_figlio_tutelato_curato    * codice deve essere passato FIGLIO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDichiarazioniPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, dichiarazione?: Dichiarazione, observe?: 'body', reportProgress?: boolean): Observable<Dichiarazione>;
    public cittadiniCfDichiarazioniPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, dichiarazione?: Dichiarazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dichiarazione>>;
    public cittadiniCfDichiarazioniPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, dichiarazione?: Dichiarazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dichiarazione>>;
    public cittadiniCfDichiarazioniPost(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, dichiarazione?: Dichiarazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDichiarazioniPost.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDichiarazioniPost.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDichiarazioniPost.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDichiarazioniPost.');
        }


        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Dichiarazione>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/dichiarazioni`,
            dichiarazione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Aggiorna una dichiarazione
     * @param shibIdentitaCodiceFiscale
     * @param xRequestID
     * @param xCodiceServizio
     * @param cf
     * @param uuidDichiarazione
     * @param dichiarazione I campi obbligatori sono  * tipo    * codice -&gt; deve essere CONGIUNTA  * stato    * codice -&gt; deve essere DA_COMPLETARE, ATTIVA, REVOCATA, SCADUTA  * modo    * codice -&gt; deve essere valorizzato ON_LINE  * dettagli    * stato      * codice -&gt; deve essere DA_APPROVARE, VALIDA, DA_APPROVARE, REVOCATA_BLOCCO, REVOCATA, SCADUTA  * genitore_tutore_curatore    * codice_fiscale  * ruolo_genitore_curatore    * codice -&gt; deve essere  GENITORE_1 o GENITORE_2  * figlio_tutelato_curato    * codice_fiscale  * ruolo_figlio_tutelato_curato    * codice deve essere passato FIGLIO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cittadiniCfDichiarazioniUuidDichiarazionePut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, uuidDichiarazione: string, dichiarazione?: Dichiarazione, observe?: 'body', reportProgress?: boolean): Observable<Dichiarazione>;
    public cittadiniCfDichiarazioniUuidDichiarazionePut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, uuidDichiarazione: string, dichiarazione?: Dichiarazione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dichiarazione>>;
    public cittadiniCfDichiarazioniUuidDichiarazionePut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, uuidDichiarazione: string, dichiarazione?: Dichiarazione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dichiarazione>>;
    public cittadiniCfDichiarazioniUuidDichiarazionePut(shibIdentitaCodiceFiscale: string, xRequestID: string, xCodiceServizio: string, cf: string, uuidDichiarazione: string, dichiarazione?: Dichiarazione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (shibIdentitaCodiceFiscale === null || shibIdentitaCodiceFiscale === undefined) {
            throw new Error('Required parameter shibIdentitaCodiceFiscale was null or undefined when calling cittadiniCfDichiarazioniUuidDichiarazionePut.');
        }

        if (xRequestID === null || xRequestID === undefined) {
            throw new Error('Required parameter xRequestID was null or undefined when calling cittadiniCfDichiarazioniUuidDichiarazionePut.');
        }

        if (xCodiceServizio === null || xCodiceServizio === undefined) {
            throw new Error('Required parameter xCodiceServizio was null or undefined when calling cittadiniCfDichiarazioniUuidDichiarazionePut.');
        }

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling cittadiniCfDichiarazioniUuidDichiarazionePut.');
        }

        if (uuidDichiarazione === null || uuidDichiarazione === undefined) {
            throw new Error('Required parameter uuidDichiarazione was null or undefined when calling cittadiniCfDichiarazioniUuidDichiarazionePut.');
        }


        let headers = this.defaultHeaders;
        if (xRequestID !== undefined && xRequestID !== null) {
            headers = headers.set('X-Request-ID', String(xRequestID));
        }
        if (xCodiceServizio !== undefined && xCodiceServizio !== null) {
            headers = headers.set('X-Codice-Servizio', String(xCodiceServizio));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Dichiarazione>(`${this.basePath}/cittadini/${encodeURIComponent(String(cf))}/dichiarazioni/${encodeURIComponent(String(uuidDichiarazione))}`,
            dichiarazione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
